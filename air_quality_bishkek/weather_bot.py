import asyncio
import logging

from datetime import datetime
from haversine import haversine
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from gidromet_scrapper import GidrometData, get_mapdata
from config import BOT_TOKEN

bot = Bot(BOT_TOKEN)

dp = Dispatcher(bot)
gidromet_state:list[GidrometData] = []

logger = logging.Logger(__name__,logging.ERROR)
f_handler = logging.FileHandler('weather_bot.log')
f_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_handler.setFormatter(f_format)
logger.addHandler(f_handler)


async def send_hello(message:types.Message):
    try:
        full_name = message.from_user.full_name
        answer_text = (
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{full_name}</b>!\n\n'
        '–≠—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –∏ –∏–Ω–¥–µ–∫—Å AQI –≤ –ë–∏—à–∫–µ–∫–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–º –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –¥–∞—Ç—á–∏–∫–µ.\n\n'
        '<b>"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∏—Ü–∏–µ–π"</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –≤–∞–º –¥–∞—Ç—á–∏–∫–∞\n'
        '<b>"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± AQI"</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –æ–± —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ AQI\n'
        '<b>"–ü–æ–º–æ—â—å"</b> –¥–ª—è –æ–±—â–µ–π —Å–ø—Ä–∞–≤–∫–∏\n'
        'üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨üá∞üá¨')
        await message.answer (text=answer_text,parse_mode='HTML',reply_markup = get_keyboard())
    except TelegramAPIError:
        logger.exception('some troubles in hello')

async def send_aqi_desc(message:types.Message):
    try:
        answer_text = (
            'AQI - –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.\n'
            '–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ AQI —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —à–µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª–µ–π –≤–æ–∑–¥—É—Ö–∞: —Ç–≤–µ—Ä–¥—ã–µ —á–∞—Å—Ç–∏—Ü—ã (PM 10 –∏ PM 2,5), –æ–∫–∏—Å—å —É–≥–ª–µ—Ä–æ–¥–∞ (CO), –æ–∑–æ–Ω (O3), –¥–≤—É–æ–∫–∏—Å—å –∞–∑–æ—Ç–∞ (NO2) –∏ –¥–≤—É–æ–∫–∏—Å—å —Å–µ—Ä—ã (SO2).\n\n'
            '–¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞:\n'
            '\U0001F7E2 - –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è\n'
            '\U0001F7E1 - —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –∏ –∏–∑–±–µ–≥–∞—Ç—å –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π –Ω–∞—Ä—É–∂–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º (–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–µ—Ç—è–º, –ø–æ–∂–∏–ª—ã–º –ª—é–¥—è–º, –±–µ—Ä–µ–º–µ–Ω–Ω—ã–º, –ª—é–¥—è–º —Å —Å–µ—Ä–¥–µ—á–Ω—ã–º–∏ –∏ –ª–µ–≥–æ—á–Ω—ã–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏)\n'
            '\U0001F7E0 - –≤—Å–µ –ø–æ–¥–≤–µ—Ä–≥–∞—é—Ç—Å—è —Ä–∏—Å–∫—É —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–∑, –∫–æ–∂–∏ –∏ –≥–æ—Ä–ª–∞, –∞ —Ç–∞–∫–∂–µ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π\n'
            '\U0001F534 - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö—É–¥—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–¥—Ü–∞ –∏ –ª–µ–≥–∫–∏—Ö (—Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞ —É–ª–∏—Ü–µ —Å–ª–µ–¥—É–µ—Ç –Ω–æ—Å–∏—Ç—å –º–∞—Å–∫—É)\n'
            '\U0001F7E4 - –∑–∞–º–µ—Ç–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ\n'
            '\U0001F7E3 - –∫–∞–∂–¥—ã–π –ø–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–º—É —Ä–∏—Å–∫—É —Å–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∏ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.\n'
        )
        await message.answer (text=answer_text,parse_mode='HTML',reply_markup = get_keyboard())
    except TelegramAPIError:
        logger.exception('some troubles in aqi_desc')

def get_keyboard():
    builder = types.ReplyKeyboardMarkup(resize_keyboard=True)
    builder.row(types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∏—Ü–∏–µ–π", request_location=True),
                types.KeyboardButton("–ü–æ–º–æ—â—å"))
    builder.row(types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± AQI"))
    return builder

async def handle_location(message: types.Message):
    try:
        user_loc = message.location.latitude, message.location.longitude
        max_distance = None
        new_distance = None
        min_dist_station_index = 0
        for pos,station_data in enumerate(gidromet_state):
            station_loc = station_data.latitude,station_data.longitude
            if pos==0:
                max_distance = haversine(user_loc,station_loc)
            else:
                new_distance = haversine(user_loc,station_loc)
            if new_distance is not None and new_distance < max_distance:
                max_distance = new_distance
                min_dist_station_index = pos
            
        reply = str(gidromet_state[min_dist_station_index])
        await message.answer(reply)
    except TelegramAPIError:
        logger.exception('Some troubles in handle_location')

async def main():
    try:
        dp.register_message_handler(send_hello,commands=['start','help'])
        dp.register_message_handler(send_hello,Text(equals='–ü–æ–º–æ—â—å'))
        dp.register_message_handler(send_aqi_desc,Text(equals='–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± AQI'))
        dp.register_message_handler(send_aqi_desc,commands=['about_aqi'])
        dp.register_message_handler(handle_location,content_types=['location'])
        await dp.bot.set_my_commands([
            types.BotCommand('/start','–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º'),
            types.BotCommand('/about_aqi','–°–ø—Ä–∞–≤–∫–∞ –æ–± AQI')
        ])
        scheduler = AsyncIOScheduler()
        scheduler.add_job(get_mapdata,IntervalTrigger(start_date=datetime.now(),hours=1),next_run_time=datetime.now(),args=(gidromet_state,))
        scheduler.start()
        
        await dp.start_polling()
    finally:
        print('close dp')
        await dp.wait_closed()
        scheduler.shutdown()
    

if __name__ == '__main__':
    asyncio.run(main())
